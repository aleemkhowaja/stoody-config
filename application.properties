# ===============================
# = Server
# ===============================
server.port=8080

# ===============================
# = Thymeleaf
# ===============================
#spring.thymeleaf.prefix=classpath:/templates/
#spring.thymeleaf.suffix=.html
#spring.thymeleaf.mode=HTML5
#spring.thymeleaf.encoding=UTF-8
#spring.thymeleaf.cache=true

# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
# Postgres
spring.datasource.url=jdbc:postgresql://localhost:5432/stoody_db
spring.datasource.username=postgres
spring.datasource.password=OrxanEliyev00
spring.datasource.driver-class-name=org.postgresql.Driver
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1

# ===============================
# = Test remove later
# ===============================
# Development mode properties
spring.thymeleaf.prefix=file:F:/Code_repos/Github/Stoody-Website/stoody_front/.temp/
spring.web.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,file:F:/Code_repos/Github/Stoody-Website/stoody_front/src/


# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=false
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=update
# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
#spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ===============================
# = Spring Servlet
# ===============================
#  Multipart file and request size
spring.servlet.multipart.max-file-size=500MB
spring.servlet.multipart.max-request-size=500MB

# ===============================
# = OAuth2
# ===============================
# = Google
spring.security.oauth2.client.registration.google.client-id=321120958853-q5kljprjo8l2jqgv1qrpi2pdvg0qju49.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
# = Facebook
spring.security.oauth2.client.registration.facebook.client-id=520504799997948
spring.security.oauth2.client.registration.facebook.client-secret=a926f136bbe4e5c4654a5a67d8b3cad3
# In order to set Facebook live mode, we'll need to provide Privacy Policy URL after release.
# Additionally, here are some links of Stoody App in Facebook:
# https://developers.facebook.com/apps/
# https://developers.facebook.com/apps/520504799997948/settings/basic/?business_id=773855387183223
# = Github
spring.security.oauth2.client.registration.github.client-id=243a38a5a6f0e5e9a34b
spring.security.oauth2.client.registration.github.client-secret=ccb7d767dd156bfe1dbb658dcd7663fd8f648c3e

# ===============================
# = Email Sender
# ===============================
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=orxan.eliyev.orxan@gmail.com
spring.mail.password=vhpnnngkukxhbpka
spring.mail.properties.mail.smpt.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
# ===============================
# = Sms Sender
# ===============================
twilio.account_sid=AC7a942598fc671d545075a7252dcceae8
twilio.auth_token=2b406bbacda33ad5202544ae890911d6
twilio.trial_number=+12184007445
# ===============================
# = AWS
# ===============================
aws.s3.accessKey=AKIARALMO6LFQYIX2MW4
aws.s3.secretKey=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
aws.s3.region=us-east-1
cloud.aws.credentials.access-key=AKIARALMO6LFQYIX2MW4
cloud.aws.credentials.secret-key=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
cloud.aws.region.static=us-east-1
cloud.aws.stack.auto=false

# ===============================
# = Payment Gateway
# ===============================
paymentwall.payment.brick.public.test=t_231a23a915b5b4718e9b3b7ead42b9
paymentwall.payment.brick.private.test=t_fde4e37cc58621299a42c998c94a8a

server.error.include-message = always
server.error.include-stacktrace=always

# ===============================
# = Payment Gateway
# ===============================
# paytm.payment.sandbox.merchantId:
# paytm.payment.sandbox.merchantKey: 
# paytm.payment.sandbox.channelId:WEB
# paytm.payment.sandbox.industryTypeId:Retail
# paytm.payment.sandbox.website:WEBSTAGING
# paytm.payment.sandbox.paytmUrl:https://securegw-stage.paytm.in/order/process
# paytm.payment.sandbox.callbackUrl:http://localhost:8080/pgresponse
# paytm.payment.sandbox.details.MID: ${paytm.payment.sandbox.merchantId}
# paytm.payment.sandbox.details.CHANNEL_ID: ${paytm.payment.sandbox.channelId}
# paytm.payment.sandbox.details.INDUSTRY_TYPE_ID: ${paytm.payment.sandbox.industryTypeId}
# paytm.payment.sandbox.details.WEBSITE: ${paytm.payment.sandbox.website}
# paytm.payment.sandbox.details.CALLBACK_URL: ${paytm.payment.sandbox.callbackUrl}
# paytm.mobile = 
# paytm.email = 